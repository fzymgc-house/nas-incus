---
description: Ansible rules for playbooks, roles, and tasks - covers role structure, naming conventions, task guidelines, variable management, security practices, and linting compliance
globs:
  - "*.yml"
  - "*.yaml"
  - "roles/**/*.yml"
  - "roles/**/*.yaml"
  - "inventory/**/*.yml"
  - "inventory/**/*.yaml"
  - "*.playbook.yml"
  - "*.playbook.yaml"
alwaysApply: false
---

# Ansible Rules for NAS Infrastructure Project

## Project Structure
- Follow the established role-based structure in `roles/`
- Use playbooks at the root level for main orchestration
- Keep inventory in `inventory/` with group_vars for configuration
- Maintain consistent naming: `{service}-playbook.yml` for playbooks

## Role Structure Standards
Each role should follow this structure:
```
roles/{role-name}/
├── defaults/main.yml      # Default variables
├── files/                 # Static files to copy
├── handlers/main.yml      # Handlers
├── meta/main.yml         # Role metadata
├── README.md             # Role documentation
├── tasks/main.yml        # Main tasks
├── templates/            # Jinja2 templates
├── tests/               # Role tests
└── vars/main.yml        # Role variables
```

## Naming Conventions
- **Roles**: Use kebab-case (e.g., `app-proxy-caddy`, `github-runner`)
- **Variables**: Use snake_case (e.g., `container_bridge_network_name`)
- **Tasks**: Use descriptive names with prefixes like `"{stem} | "`
- **Tags**: Use kebab-case for playbook tags (e.g., `nas-app-proxy`, `incus-common`)

## Task Guidelines
- Always use `ansible.builtin` or `community.general` modules when possible
- Include `changed_when` and `failed_when` for command tasks
- Use `register` to capture command outputs
- Add appropriate tags for selective execution
- Use `become: true` for tasks requiring elevated privileges

## Variable Management
- Use `group_vars/` for environment-specific variables
- Keep sensitive data in vault files
- Use `defaults/main.yml` for role defaults
- Follow the pattern: `{role_name}_variable_name`

## Template Guidelines
- Use `.j2` extension for Jinja2 templates
- Include proper variable validation
- Use consistent indentation (2 spaces)
- Add comments for complex logic

## Security Practices
- Never commit vault passwords or secrets
- Use `ansible-vault` for sensitive data
- Validate input variables
- Use `no_log: true` for tasks with sensitive output

## Testing
- Include test playbooks in `roles/{role}/tests/`
- Use molecule for role testing (see geerlingguy.docker example)
- Test with different distributions when applicable

## Documentation
- Each role must have a README.md
- Document all variables in defaults/main.yml
- Include usage examples
- Document dependencies and requirements

## Linting Compliance
- Follow `.ansible-lint` configuration
- Use `yamllint` for YAML formatting
- Ensure task names follow the prefix pattern
- Avoid deprecated syntax and modules

## Pre-commit Integration
- All YAML files are linted with ansible-lint
- Exclude external roles from linting
- Use the production profile for strict checking
- Enable additional rules: args, empty-string-compare, no-log-password

## Common Patterns
```yaml
# Task with proper error handling
- name: Execute command with validation
  ansible.builtin.command: some_command
  register: command_result
  changed_when: command_result.rc == 0
  failed_when: command_result.rc != 0

# Template with variables
- name: Configure service
  ansible.builtin.template:
    src: config.j2
    dest: /etc/service/config
    mode: '0644'
    validate: 'service --test-config %s'
  notify: restart service
```

## Import Playbook Pattern
```yaml
- name: Run {service} playbook
  ansible.builtin.import_playbook: {service}-playbook.yml
  tags:
    - {service}
```

## Host Groups
- Use descriptive group names in inventory
- Separate concerns with different playbooks
- Use `strategy: free` for parallel execution when appropriate
- Gather facts only when needed
description:
globs:
alwaysApply: false
---
