#cloud-config
groups:
  - apps: [root]
# NTP Configuration
# NOTE: These servers should match the Ansible group_vars/all.yml ntp_servers list
ntp:
  enabled: true
  ntp_client: chrony
  pools: [0.us.pool.ntp.org,1.us.pool.ntp.org]
  servers: [ 192.168.20.1, 192.168.20.151, 192.168.20.152, 192.168.20.153 ]
no_ssh_fingerprints: true
package_update: true
package_upgrade: true
package_reboot_if_required: true
packages:
  - apt-transport-https
  - build-essential
  - ca-certificates
  - curl
  - debian-archive-keyring
  - debian-keyring
  - docker-compose
  - docker.io
  - gnupg
  - gpg
  - jq
  - libicu-dev
  - libssl-dev
  - lsb-release
  - nodejs
  - npm
  - python3
  - python3-pip
  - python3-venv
  - software-properties-common
  - ssh
  - ssh-import-id
  - sudo
  - unzip

ssh:
  emit_keys_to_console: false
timezone: America/New_York
users:
  - name: fzymgc
    gecos: fzymgc
    primary_group: fzymgc
    groups: [adm, cdrom, dip, lxd, sudo]
    sudo: "ALL=(ALL) NOPASSWD:ALL"
    lock_passwd: true
    shell: /bin/bash
    ssh_authorized_keys:
    - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILlE7jt0Nv9CBg2djK6SNR253ZmkvssUECHHVs/bKz5O
  - name: apps
    primary_group: apps
    uid: 568
    shell: /bin/bash
    lock_passwd: true
  - name: runner
    uid: 1500
    gid: 1500
    shell: /bin/bash
    groups: [docker, sudo]
    sudo: ALL=(ALL) NOPASSWD:ALL
    home: /home/runner

# Docker configuration
write_files:
  # DNS Configuration
  # NOTE: These values should match the Ansible group_vars/all.yml settings:
  # - primary_dns_server: 192.168.20.1
  # - primary_domain: fzymgc.house
  - path: /etc/systemd/resolved.conf
    owner: 'root:root'
    permissions: '0644'
    content: |
      #  This file is part of systemd.
      #
      #  systemd is free software; you can redistribute it and/or modify it under the
      #  terms of the GNU Lesser General Public License as published by the Free
      #  Software Foundation; either version 2.1 of the License, or (at your option)
      #  any later version.
      #
      # Entries in this file show the compile time defaults. Local configuration
      # should be created by either modifying this file (or a copy of it placed in
      # /etc/ if the original file is shipped in /usr/), or by creating "drop-ins" in
      # the /etc/systemd/resolved.conf.d/ directory. The latter is generally
      # recommended. Defaults can be restored by simply deleting the main
      # configuration file and all drop-ins located in /etc/.
      #
      # Use 'systemd-analyze cat-config systemd/resolved.conf' to display the full config.
      #
      # See resolved.conf(5) for details.

      [Resolve]
      # Some examples of DNS servers which may be used for DNS= and FallbackDNS=:
      # Cloudflare: 1.1.1.1#cloudflare-dns.com 1.0.0.1#cloudflare-dns.com 2606:4700:4700::1111#cloudflare-dns.com 2606:4700:4700::1001#cloudflare-dns.com
      # Google:     8.8.8.8#dns.google 8.8.4.4#dns.google 2001:4860:4860::8888#dns.google 2001:4860:4860::8844#dns.google
      # Quad9:      9.9.9.9#dns.quad9.net 149.112.112.112#dns.quad9.net 2620:fe::fe#dns.quad9.net 2620:fe::9#dns.quad9.net
      DNS=192.168.20.1
      #FallbackDNS=
      Domains=fzymgc.house
      #DNSSEC=no
      #DNSOverTLS=no
      MulticastDNS=yes
      LLMNR=yes
      #Cache=yes
      #CacheFromLocalhost=no
      #DNSStubListener=no
      #DNSStubListenerExtra=
      #ReadEtcHosts=yes
      #ResolveUnicastSingleLabel=no
      #StaleRetentionSec=0
  - path: /etc/docker/daemon.json
    content: |
      {
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "10m",
          "max-file": "3"
        },
        "storage-driver": "overlay2"
      }

# Logging configuration
write_files:
  - path: /usr/local/bin/log-action
    owner: 'root:root'
    permissions: '0755'
    content: |
      #!/bin/bash
      # Structured logging helper for cloud-init actions
      TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
      LEVEL="${1:-INFO}"
      COMPONENT="${2:-cloud-init}"
      MESSAGE="${3:-No message provided}"
      echo "{\"timestamp\":\"${TIMESTAMP}\",\"level\":\"${LEVEL}\",\"component\":\"${COMPONENT}\",\"message\":\"${MESSAGE}\"}" | tee -a /var/log/cloud-init-structured.log
  - path: /usr/local/bin/github-runner-health-check
    owner: 'root:root'
    permissions: '0755'
    content: |
      #!/bin/bash
      # GitHub Runner health check script
      # Returns 0 if healthy, non-zero if unhealthy
      
      LOGFILE="/var/log/github-runner-health.log"
      TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
      
      # Function to log health check results
      log_health() {
        local status="$1"
        local component="$2"
        local message="$3"
        echo "{\"timestamp\":\"${TIMESTAMP}\",\"status\":\"${status}\",\"component\":\"${component}\",\"message\":\"${message}\"}" >> "${LOGFILE}"
      }
      
      # Check if Docker is running
      if ! systemctl is-active --quiet docker; then
        log_health "FAIL" "docker" "Docker service is not running"
        exit 1
      fi
      log_health "OK" "docker" "Docker service is running"
      
      # Check if Docker daemon is responsive
      if ! docker info >/dev/null 2>&1; then
        log_health "FAIL" "docker" "Docker daemon is not responsive"
        exit 2
      fi
      log_health "OK" "docker" "Docker daemon is responsive"
      
      # Check if runner service is configured (if exists)
      if systemctl list-unit-files | grep -q github-runner.service; then
        if systemctl is-active --quiet github-runner; then
          log_health "OK" "runner" "GitHub runner service is running"
        else
          log_health "WARN" "runner" "GitHub runner service is not running (may not be configured yet)"
        fi
      else
        log_health "INFO" "runner" "GitHub runner service not yet installed"
      fi
      
      # Check disk space
      DISK_USAGE=$(df -h /home/runner 2>/dev/null | awk 'NR==2 {print $5}' | sed 's/%//')
      if [ -n "${DISK_USAGE}" ] && [ "${DISK_USAGE}" -gt 90 ]; then
        log_health "WARN" "disk" "Disk usage is high: ${DISK_USAGE}%"
      else
        log_health "OK" "disk" "Disk usage is acceptable: ${DISK_USAGE}%"
      fi
      
      # Check memory usage
      MEM_AVAILABLE=$(free -m | awk 'NR==2 {print $7}')
      MEM_TOTAL=$(free -m | awk 'NR==2 {print $2}')
      if [ "${MEM_AVAILABLE}" -lt 512 ]; then
        log_health "WARN" "memory" "Low available memory: ${MEM_AVAILABLE}MB"
      else
        log_health "OK" "memory" "Memory available: ${MEM_AVAILABLE}MB of ${MEM_TOTAL}MB"
      fi
      
      # Overall health status
      log_health "OK" "overall" "Health check completed successfully"
      exit 0
  - path: /etc/systemd/system/github-runner-health.service
    owner: 'root:root'
    permissions: '0644'
    content: |
      [Unit]
      Description=GitHub Runner Health Check
      After=multi-user.target
      
      [Service]
      Type=oneshot
      ExecStart=/usr/local/bin/github-runner-health-check
      StandardOutput=journal
      StandardError=journal
  - path: /etc/systemd/system/github-runner-health.timer
    owner: 'root:root'
    permissions: '0644'
    content: |
      [Unit]
      Description=Run GitHub Runner Health Check every 5 minutes
      Requires=github-runner-health.service
      
      [Timer]
      OnBootSec=2min
      OnUnitActiveSec=5min
      
      [Install]
      WantedBy=timers.target

# Runner directories and permissions
runcmd:
  # Initialize structured logging
  - /usr/local/bin/log-action INFO system "Starting cloud-init configuration for GitHub runner"
  
  # System configuration
  - groupmod -g 568 apps && /usr/local/bin/log-action INFO system "Modified apps group GID" || /usr/local/bin/log-action ERROR system "Failed to modify apps group GID"
  - systemctl enable --now ssh && /usr/local/bin/log-action INFO system "Enabled and started SSH service" || /usr/local/bin/log-action ERROR system "Failed to enable SSH service"
  # Enable and start Docker
  - /usr/local/bin/log-action INFO docker "Enabling Docker service"
  - systemctl enable docker || { /usr/local/bin/log-action ERROR docker "Failed to enable Docker service"; echo "Error: Failed to enable Docker service"; }
  - systemctl start docker || { /usr/local/bin/log-action ERROR docker "Failed to start Docker service"; echo "Error: Failed to start Docker service"; exit 1; }

  # Verify Docker is running before adding user to group
  - |
    /usr/local/bin/log-action INFO docker "Waiting for Docker daemon to be ready"
    for i in {1..30}; do
      docker info >/dev/null 2>&1 && { /usr/local/bin/log-action INFO docker "Docker daemon is ready"; break; } || { echo "Waiting for Docker daemon to be ready... ($i/30)"; sleep 2; }
    done
    docker info >/dev/null 2>&1 || { /usr/local/bin/log-action ERROR docker "Docker daemon failed to start after 60 seconds"; echo "Error: Docker daemon failed to start"; exit 1; }

  # Add runner user to docker group after Docker is verified running
  - usermod -aG docker runner && /usr/local/bin/log-action INFO user "Added runner to docker group" || { /usr/local/bin/log-action ERROR user "Failed to add runner to docker group"; echo "Error: Failed to add runner to docker group"; }

  # Create runner directories
  - /usr/local/bin/log-action INFO filesystem "Creating runner directories"
  - mkdir -p /home/runner/actions-runner && /usr/local/bin/log-action INFO filesystem "Created actions-runner directory" || { /usr/local/bin/log-action ERROR filesystem "Failed to create actions-runner directory"; echo "Error: Failed to create actions-runner directory"; }
  - mkdir -p /home/runner/workspace && /usr/local/bin/log-action INFO filesystem "Created workspace directory" || { /usr/local/bin/log-action ERROR filesystem "Failed to create workspace directory"; echo "Error: Failed to create workspace directory"; }
  - mkdir -p /home/runner/.config && /usr/local/bin/log-action INFO filesystem "Created .config directory" || { /usr/local/bin/log-action ERROR filesystem "Failed to create .config directory"; echo "Error: Failed to create .config directory"; }

  # Set ownership
  - chown -R runner:runner /home/runner && /usr/local/bin/log-action INFO filesystem "Set ownership for runner home directory" || /usr/local/bin/log-action ERROR filesystem "Failed to set ownership for runner home directory"

  # Configure git for runner user
  - /usr/local/bin/log-action INFO git "Configuring git for runner user"
  - sudo -u runner git config --global init.defaultBranch main && /usr/local/bin/log-action INFO git "Set git default branch to main" || { /usr/local/bin/log-action WARN git "Failed to set git default branch"; echo "Warning: Failed to set git default branch"; }
  - sudo -u runner git config --global user.name "GitHub Runner" && /usr/local/bin/log-action INFO git "Set git user name" || { /usr/local/bin/log-action WARN git "Failed to set git user name"; echo "Warning: Failed to set git user name"; }
  - sudo -u runner git config --global user.email "runner@localhost" && /usr/local/bin/log-action INFO git "Set git user email" || { /usr/local/bin/log-action WARN git "Failed to set git user email"; echo "Warning: Failed to set git user email"; }

  # Install GitHub CLI
  - |
    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg || {
      echo "Warning: Failed to download GitHub CLI keyring"
    }
    if [ -f /usr/share/keyrings/githubcli-archive-keyring.gpg ]; then
      chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
      apt-get update || echo "Warning: apt-get update failed for GitHub CLI repo"
      apt-get install -y gh || echo "Warning: Failed to install GitHub CLI"
    fi

  # Configure systemd service for runner (placeholder - will be configured by Ansible)
  - |
    cat > /etc/systemd/system/github-runner.service << 'EOF'
    [Unit]
    Description=GitHub Actions Runner
    After=network.target docker.service
    Wants=docker.service
    Requires=docker.service

    [Service]
    Type=simple
    User=runner
    Group=runner
    WorkingDirectory=/home/runner/actions-runner
    ExecStartPre=/bin/bash -c 'for i in {1..150}; do docker info >/dev/null 2>&1 && break || { echo "Waiting for Docker... ($i/150)"; sleep 2; }; done; docker info >/dev/null 2>&1'
    ExecStart=/home/runner/actions-runner/run.sh
    Restart=always
    RestartSec=10
    KillMode=process
    KillSignal=SIGTERM
    TimeoutStopSec=5

    [Install]
    WantedBy=multi-user.target
    EOF

  # Don't enable the service yet - Ansible will handle registration and enablement
  - systemctl daemon-reload && /usr/local/bin/log-action INFO systemd "Reloaded systemd daemon" || /usr/local/bin/log-action ERROR systemd "Failed to reload systemd daemon"
  
  # Enable health check monitoring
  - systemctl enable github-runner-health.timer && /usr/local/bin/log-action INFO monitoring "Enabled health check timer" || /usr/local/bin/log-action ERROR monitoring "Failed to enable health check timer"
  - systemctl start github-runner-health.timer && /usr/local/bin/log-action INFO monitoring "Started health check timer" || /usr/local/bin/log-action ERROR monitoring "Failed to start health check timer"
  
  # Log completion
  - /usr/local/bin/log-action INFO system "Cloud-init configuration completed successfully"